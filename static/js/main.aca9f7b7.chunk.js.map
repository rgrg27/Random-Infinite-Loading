{"version":3,"sources":["constants.js","App.js","serviceWorker.js","index.js"],"names":["urlList","Cards","lazy","App","state","items","trackScrolling","wrappedElement","document","getElementById","isBottom","getData","i","this","setNextUrl","Promise","all","x","Math","floor","random","length","axios","get","then","resp","json","res","undefined","data","url","image","checkUrl","setState","mediaType","trim","slice","includes","el","getBoundingClientRect","bottom","window","innerHeight","addEventListener","removeEventListener","loadingImg","className","alt","src","map","item","key","fallback","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kTAAaA,EAAU,CAAC,+BAAgC,+B,iBCKlDC,G,MAAQC,gBAAK,kBAAM,iCAsGVC,E,4MAlGbC,MAAQ,CACNC,MAAO,I,EAkETC,eAAiB,WACf,IAAMC,EAAiBC,SAASC,eAAe,QAC3C,EAAKC,SAASH,IAChB,EAAKI,W,yDAhEP,IADA,IACQC,EAAE,EAAEA,EAAE,EAAEA,IACTC,KAAKC,e,0JAIMC,QAAQC,IAAI,CAC9BH,KAAKC,aACLD,KAAKC,aACLD,KAAKC,aACLD,KAAKC,aACLD,KAAKC,aACLD,KAAKC,e,uJAGM,IAAD,OACNG,EAAIC,KAAKC,MAAOD,KAAKE,SAAWpB,EAAQqB,QAC5CC,IACGC,IAAIvB,EAAQiB,IACZO,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,QACcC,IAAfD,EAAIE,KAAKC,UAAoCF,IAAjBD,EAAIE,KAAKE,MACnC,EAAKC,SAASL,EAAIE,KAAKE,OACxB,EAAKE,SAAS,CAAE5B,MAAM,GAAD,mBAAM,EAAKD,MAAMC,OAAjB,CAAuBsB,EAAIE,KAAKE,UAGrD,EAAKjB,kBAGgBc,IAAjBD,EAAIE,KAAKE,YAAoCH,IAAfD,EAAIE,KAAKC,MAC1C,EAAKE,SAASL,EAAIE,KAAKC,KACxB,EAAKG,SAAS,CAAE5B,MAAM,GAAD,mBAAM,EAAKD,MAAMC,OAAjB,CAAuBsB,EAAIE,KAAKC,QAGrD,EAAKhB,mB,+BAKNgB,GACP,IAAII,EAAYJ,EAAIK,OAAOC,MAAMN,EAAIT,OAAO,EAAES,EAAIT,QAClD,MAAe,QAAZa,GAAiC,QAAZA,IAGrBrB,KAAKT,MAAMC,MAAMgC,SAASP,K,+BAKtBQ,GACP,OAAOA,EAAGC,wBAAwBC,QAAUC,OAAOC,YAAY,M,0CAI/D7B,KAAKF,UACLH,SAASmC,iBAAiB,SAAU9B,KAAKP,kB,6CAIzCE,SAASoC,oBAAoB,SAAU/B,KAAKP,kB,+BAY5C,IAAMuC,EAAa,yBAAKC,UAAU,aAChC,yBAAKC,IAAI,UAAUC,IAAI,yDAGnB3C,EAAQQ,KAAKT,MAAMC,MAAM4C,KAAI,SAAAC,GACjC,OACE,kBAAC,WAAD,CAAUC,IAAKD,EAAME,SAAUP,GAC7B,kBAAC5C,EAAD,CAAO8B,MAAOmB,QAKpB,OACE,yBAAKJ,UAAU,OACb,yBAAKA,UAAU,aACZzC,Q,GA5FOgD,aCIEC,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpD,SAASC,eAAe,SDyHpB,kBAAmBoD,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aca9f7b7.chunk.js","sourcesContent":["export const urlList = [\"https://random.dog/woof.json\", \"https://randomfox.ca/floof/\"];","import React, { Suspense, lazy, Component } from 'react';\nimport {urlList} from \"./constants\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nconst Cards = lazy(() => import('./cards'));\n\n\nclass App extends Component {\n  state = {\n    items: [],\n  };\n\n  getOData(){\n    var a;\n    for(let i=0;i<6;i++){\n       a = this.setNextUrl();\n    }\n  }\n  async getData(){\n    let calls = await Promise.all([\n    this.setNextUrl(),\n    this.setNextUrl(),\n    this.setNextUrl(),\n    this.setNextUrl(),\n    this.setNextUrl(),\n    this.setNextUrl()\n  ]);\n  }\n  setNextUrl(){\n    var x = Math.floor((Math.random() * urlList.length) );\n    axios\n      .get(urlList[x])\n      .then(resp => resp.json())\n      .then(res => {\n        if(res.data.url===undefined && res.data.image!==undefined){\n          if(this.checkUrl(res.data.image)){\n            this.setState({ items: [...this.state.items,res.data.image] });\n          }\n          else{\n            this.setNextUrl();\n          }\n        }        \n        else if(res.data.image===undefined && res.data.url!==undefined){\n          if(this.checkUrl(res.data.url)){\n            this.setState({ items: [...this.state.items,res.data.url] });\n          }\n          else{\n            this.setNextUrl();\n          }\n        }\n      });\n  }\n  checkUrl(url){\n    var mediaType = url.trim().slice(url.length-3,url.length);\n    if(mediaType===\"mp4\" || mediaType===\"ebm\"){\n      return false;\n    }\n    if(this.state.items.includes(url)){\n      return false;\n    }\n    return true;\n  }\n  isBottom(el) {\n    return el.getBoundingClientRect().bottom <= window.innerHeight+150;\n  }\n\n  componentDidMount() {\n    this.getData();\n    document.addEventListener('scroll', this.trackScrolling);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('scroll', this.trackScrolling);\n  }\n\n  trackScrolling = () => {\n    const wrappedElement = document.getElementById('root');\n    if (this.isBottom(wrappedElement)) {\n      this.getData();\n      //document.removeEventListener('scroll', this.trackScrolling);\n    }\n  };\n\n  render() {\n    const loadingImg = <div className=\"album-img\">\n      <img alt=\"loading\" src=\"https://media.giphy.com/media/y1ZBcOGOOtlpC/200.gif\" />\n    </div>\n\n    const items = this.state.items.map(item => {\n      return (\n        <Suspense key={item} fallback={loadingImg}>\n          <Cards image={item} />\n        </Suspense>\n      );\n    });\n\n    return (\n      <div className=\"app\">\n        <div className=\"card-list\">\n          {items}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}